//
//  ForceUpdateManager.swift
//
//  Created by Mahmoud Abdul-wahab on 12/04/2022.
//

import UIKit

// MARK: - AppInfo
struct AppInfo: Codable {
    let results: [AppInfoData]?
}

// MARK: - AppInfoData
struct AppInfoData: Codable {
    let trackViewURL: String
    let trackName, primaryGenreName: String
    let version: String
    let minimumOSVersion: String?
    
    enum CodingKeys: String, CodingKey {
        case trackViewURL = "trackViewUrl"
        case trackName,primaryGenreName
        case version
        case minimumOSVersion = "minimumOsVersion"
    }
}

enum VersionError: Error {
    case invalidBundleInfo, invalidResponse
}


struct ForceUpdateManager {
    
    static let shared = ForceUpdateManager()
    let appleId = "Put your app apple id from apple store account here"
   
    /// - Returns: The current installed version of the app.
    func currentVersion() -> String? {
        guard let info = Bundle.main.infoDictionary,
              let currentVersion = info["CFBundleShortVersionString"] as? String else {return nil}
        return currentVersion
    }
    
    func showUpdate(withForce: Bool) {
        DispatchQueue.global().async {
            self.checkVersion(force : withForce)
        }
    }
    
    private  func checkVersion(force: Bool) {
        
        _ = try? isUpdateAvailable { (canUpdate, error, info) in
            if let error = error {
                print("error getting app store version: ", error)
            } else if let canUpdate = canUpdate {
                if canUpdate{
                    print("Needs update.........")
                    DispatchQueue.main.async {
                        let topController: UIViewController = (UIApplication.shared.windows.first?.rootViewController)!
                        topController.showAppUpdateAlert(force: force, appInfoData: info!)
                    }
                }else{
                    print("Already on the last app version")
                }
            }
        }
    }
    
    func isUpdateAvailable(completion: @escaping (Bool?, Error?,AppInfoData?) -> Void) throws -> URLSessionDataTask {
        
        let url = URL(string: "https://itunes.apple.com/lookup?id=\(appleId)")
        let task = URLSession.shared.dataTask(with: url!) { (data, response, error) in
            do {
                if let error = error { throw error }
                guard let data = data else { throw VersionError.invalidResponse }
                let result = try JSONDecoder().decode(AppInfo.self, from: data)
                guard let info = result.results?.first else {throw VersionError.invalidResponse}
                completion(info.version != currentVersion(), nil, info)
            } catch {
                completion(nil, error,nil)
            }
        }
        task.resume()
        return task
    }
    
    
}



extension UIViewController {
    func showAppUpdateAlert(force: Bool, appInfoData: AppInfoData) {
        let alertTitle = "Oops!Key".localized
        var alertMessage = "needUpdatesKey".localized
        let alertController = UIAlertController(title: alertTitle, message: alertMessage, preferredStyle: .alert)
        
        if !force {
            alertMessage = "Recomended.Updates".localized
            let notNowButton = UIAlertAction(title: "Not.now".localized, style: .default)
            alertController.addAction(notNowButton)
        }
        let updateButton = UIAlertAction(title: "updateKey".localized, style: .default) { (action:UIAlertAction) in
            guard let url = URL(string: appInfoData.trackViewURL) else {
                return
            }
            UIApplication.shared.open(url, options: [:], completionHandler: nil)
        }
        
        alertController.addAction(updateButton)
        self.present(alertController, animated: true, completion: nil)
    }
}


